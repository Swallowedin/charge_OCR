import streamlit as st
import os
import pandas as pd
import numpy as np
import pytesseract
import cv2
from PIL import Image
import json
import csv
from openai import OpenAI
import tempfile
import io
from pathlib import Path
import base64
import re

# Titre et configuration de la page
st.set_page_config(
    page_title="Analyseur de Charges - Baux Commerciaux",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main {
        padding: 2rem;
    }
    .stTabs [data-baseweb="tab-panel"] {
        padding-top: 1rem;
    }
    .reportview-container .main .block-container {
        max-width: 1200px;
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .stAlert {
        margin-top: 1rem;
    }
    .results-container {
        background-color: #f8f9fa;
        border-radius: 5px;
        padding: 1.5rem;
        margin-top: 1rem;
    }
</style>
""", unsafe_allow_html=True)

class ChargesAnalyzer:
    """
    Classe pour analyser les tableaux de charges des baux commerciaux 
    √† partir de diff√©rents formats (Excel, CSV, PDF) en utilisant l'OCR et GPT-4o-mini.
    """
    
    def __init__(self, api_key=None, ocr_api_key=None, use_ai=True, tesseract_config=None):
        """
        Initialise l'analyseur de charges.
        
        Args:
            api_key (str, optional): Cl√© API OpenAI.
            ocr_api_key (str, optional): Cl√© API OCR (si utilisation d'une API OCR externe).
            use_ai (bool, optional): Indique si l'IA doit √™tre utilis√©e pour l'analyse.
            tesseract_config (str, optional): Configuration Tesseract OCR personnalis√©e.
        """
        self.api_key = api_key
        if not self.api_key:
            raise ValueError("Cl√© API OpenAI non fournie.")
            
        # Initialiser le client OpenAI
        self.client = OpenAI(api_key=self.api_key)
        
        # Stocker la cl√© API OCR si fournie
        self.ocr_api_key = ocr_api_key
        
        # Utilisation de l'IA pour l'analyse
        self.use_ai = use_ai
        
        # Configuration de Tesseract OCR pour Streamlit Cloud
        # Dans Streamlit Cloud, nous devons utiliser pytesseract avec des configurations sp√©cifiques
        self.tesseract_config = tesseract_config or r'--oem 3 --psm 6'
    
    def process_file(self, uploaded_file):
        """
        Traite un fichier t√©l√©charg√© par l'utilisateur.
        
        Args:
            uploaded_file (UploadedFile): Fichier t√©l√©charg√© via Streamlit.
            
        Returns:
            dict: R√©sultats de l'analyse structur√©s.
        """
        file_extension = Path(uploaded_file.name).suffix.lower()
        
        # Cr√©er un fichier temporaire
        with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as tmp_file:
            # √âcrire le contenu du fichier t√©l√©charg√© dans le fichier temporaire
            tmp_file.write(uploaded_file.getvalue())
            tmp_path = tmp_file.name
        
        try:
            if file_extension == '.pdf':
                result = self.analyze_pdf(tmp_path)
            elif file_extension in ['.xlsx', '.xls']:
                result = self.analyze_excel(tmp_path)
            elif file_extension == '.csv':
                result = self.analyze_csv(tmp_path)
            else:
                raise ValueError(f"Format de fichier non support√©: {file_extension}")
            
            # Supprimer le fichier temporaire
            os.unlink(tmp_path)
            
            return result
        except Exception as e:
            # Supprimer le fichier temporaire en cas d'erreur
            os.unlink(tmp_path)
            raise e
    
    def analyze_pdf(self, pdf_path):
        """
        Analyse un fichier PDF en utilisant l'OCR et GPT-4o-mini.
        
        Args:
            pdf_path (str): Chemin vers le fichier PDF.
            
        Returns:
            dict: R√©sultats de l'analyse.
        """
        st.info("Analyse du PDF en cours... Cette op√©ration peut prendre quelques instants.")
        progress_bar = st.progress(0)
        
        try:
            # Utiliser pdf2image pour convertir le PDF en images
            from pdf2image import convert_from_path
            
            # Sur Streamlit Cloud, nous devons sp√©cifier le chemin vers poppler
            try:
                images = convert_from_path(pdf_path)
            except Exception as e:
                st.error(f"Erreur lors de la conversion du PDF: {str(e)}")
                st.warning("Tentative d'installation de poppler...")
                
                # Afficher une information pour l'installation manuelle de poppler dans requirements.txt
                st.info("Assurez-vous que 'poppler-utils' est install√© sur votre serveur Streamlit Cloud. Ajoutez les d√©pendances dans requirements.txt")
                return {"error": "L'installation de poppler est requise pour traiter les PDFs."}
        
            extracted_text = ""
            total_pages = len(images)
            
            for i, image in enumerate(images):
                # Mettre √† jour la barre de progression
                progress_bar.progress((i + 0.5) / total_pages)
                
                # Pr√©traitement de l'image pour am√©liorer l'OCR
                img_np = np.array(image)
                
                # Conversion en niveaux de gris
                gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)
                
                # Appliquer un seuillage pour am√©liorer la nettet√©
                _, binary = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY)
                
                # Effectuer l'OCR
                page_text = pytesseract.image_to_string(binary, config=self.tesseract_config, lang='fra')
                
                # Ajouter le texte extrait
                extracted_text += f"\n\n--- PAGE {i+1} ---\n\n{page_text}"
                
                # Mettre √† jour la barre de progression
                progress_bar.progress((i + 1) / total_pages)
        
            # Analyser le texte extrait avec GPT-4o-mini
            return self._analyze_with_gpt(extracted_text, source_type="PDF")
            
        except Exception as e:
            st.error(f"Erreur lors de l'analyse du PDF: {str(e)}")
            return {"error": str(e)}
    
    def analyze_excel(self, excel_path):
        """
        Analyse un fichier Excel.
        
        Args:
            excel_path (str): Chemin vers le fichier Excel.
            
        Returns:
            dict: R√©sultats de l'analyse.
        """
        st.info("Analyse du fichier Excel en cours...")
        
        try:
            # Lire toutes les feuilles du fichier Excel
            excel_data = {}
            xlsx = openpyxl.load_workbook(excel_path, data_only=True)
            
            for sheet_name in xlsx.sheetnames:
                sheet = xlsx[sheet_name]
                
                # Convertir la feuille en texte
                sheet_text = f"Feuille: {sheet_name}\n\n"
                
                for row in sheet.iter_rows(values_only=True):
                    row_values = [str(cell) if cell is not None else "" for cell in row]
                    sheet_text += " | ".join(row_values) + "\n"
                
                excel_data[sheet_name] = sheet_text
            
            # Concat√©ner toutes les feuilles en un seul texte
            combined_text = "\n\n".join([f"--- {sheet} ---\n{text}" for sheet, text in excel_data.items()])
            
            # Analyser avec GPT-4o-mini
            return self._analyze_with_gpt(combined_text, source_type="Excel")
            
        except Exception as e:
            st.error(f"Erreur lors de l'analyse du fichier Excel: {str(e)}")
            return {"error": str(e)}
    
    def analyze_csv(self, csv_path):
        """
        Analyse un fichier CSV.
        
        Args:
            csv_path (str): Chemin vers le fichier CSV.
            
        Returns:
            dict: R√©sultats de l'analyse.
        """
        st.info("Analyse du fichier CSV en cours...")
        
        try:
            # Essayer de d√©terminer le d√©limiteur
            with open(csv_path, 'r', encoding='utf-8', errors='replace') as file:
                sample = file.read(1024)
                sniffer = csv.Sniffer()
                delimiter = sniffer.sniff(sample).delimiter
            
            # Lire le CSV
            df = pd.read_csv(csv_path, delimiter=delimiter, encoding='utf-8', errors='replace')
            
            # Convertir en texte
            csv_text = df.to_string(index=False)
            
            # Analyser avec GPT-4o-mini
            return self._analyze_with_gpt(csv_text, source_type="CSV")
            
        except Exception as e:
            st.error(f"Erreur lors de l'analyse du fichier CSV: {str(e)}")
            return {"error": str(e)}
    
    def _analyze_with_gpt(self, text, source_type):
        """
        Utilise GPT-4o-mini pour analyser le texte extrait.
        
        Args:
            text (str): Texte √† analyser.
            source_type (str): Type de la source (PDF, Excel, CSV).
            
        Returns:
            dict: R√©sultats de l'analyse structur√©s.
        """
        logger.info(f"Analyse du texte avec GPT-4o-mini (source: {source_type})")
        
        # Limiter la taille du texte si n√©cessaire
        if len(text) > 15000:
            logger.warning(f"Le texte a √©t√© tronqu√© de {len(text)} √† 15000 caract√®res")
            text = text[:15000] + "...[tronqu√©]"
        
        # D√©finir le prompt pour GPT-4o-mini
        prompt = f"""
        Tu es un expert en analyse de tableaux de charges et redditions de charges pour des baux commerciaux.
        Voici un tableau de charges extrait d'un document {source_type}.
        
        {text}
        
        Analyse pr√©cis√©ment ce tableau de charges et extrait les informations suivantes au format JSON :
        1. Type de document : d√©termine s'il s'agit d'une reddition de charges, d'un appel de charges ou d'un budget pr√©visionnel
        2. Ann√©e ou p√©riode concern√©e : extrait la p√©riode exacte mentionn√©e (format JJ/MM/AAAA)
        3. Montant total des charges : montant total en euros
        4. R√©partition des charges par poste : extrait tous les postes mentionn√©s (nettoyage, s√©curit√©, maintenance, etc.) avec leurs montants
        5. Quote-part du locataire : fraction ou pourcentage des charges affect√©es au locataire (tanti√®mes)
        6. Montant factur√© au locataire : montant final √† payer par le locataire
        7. Montant des provisions d√©j√† vers√©es : sommes d√©j√† pay√©es par le locataire
        8. Solde : diff√©rence entre les provisions et les charges r√©elles (cr√©diteur ou d√©biteur)
        
        Sois particuli√®rement attentif aux montants pr√©c√©d√©s de signes n√©gatifs (-) qui indiquent des cr√©dits ou des provisions.
        Pour les redditions de charges, le solde peut √™tre positif (√† la charge du locataire) ou n√©gatif (en faveur du locataire).
        
        R√©ponds uniquement avec le JSON structur√© des r√©sultats.
        """
        
        try:
            # Tenter d'abord d'extraire les informations sans appeler l'API
            # Particuli√®rement utile pour les formats standards comme les redditions de charges
            result = self._extract_charges_data(text)
            
            # Si la m√©thode standard a donn√© des r√©sultats satisfaisants, les utiliser
            if self._is_extraction_complete(result):
                st.success("Analyse r√©ussie avec l'extraction directe!")
                return result
                
            # Sinon, utiliser l'API OpenAI
            st.info("Utilisation de l'IA pour compl√©ter l'analyse...")
            
            # Appeler l'API OpenAI
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Tu es un assistant sp√©cialis√© dans l'analyse de documents financiers immobiliers."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1
            )
            
            # Extraire la r√©ponse
            analysis_text = response.choices[0].message.content
            
            # Nettoyer la r√©ponse pour extraire uniquement le JSON
            json_start = analysis_text.find('{')
            json_end = analysis_text.rfind('}') + 1
            
            if json_start >= 0 and json_end > json_start:
                json_text = analysis_text[json_start:json_end]
                try:
                    # Analyser le JSON
                    analysis_result = json.loads(json_text)
                    st.success("Analyse r√©ussie avec l'IA!")
                    return analysis_result
                except json.JSONDecodeError as e:
                    st.error(f"Erreur de d√©codage JSON: {str(e)}")
                    return {"error": "Format de r√©ponse invalide", "raw_response": analysis_text}
            else:
                st.error("Pas de JSON trouv√© dans la r√©ponse")
                return {"error": "Pas de JSON trouv√© dans la r√©ponse", "raw_response": analysis_text}
            
        except Exception as e:
            st.error(f"Erreur lors de l'analyse: {str(e)}")
            return {"error": str(e)}
            
    def _extract_charges_data(self, text):
        """
        M√©thode d'extraction directe des donn√©es de charges sans recourir √† l'API.
        Particuli√®rement utile pour les formats standards comme les redditions de charges.
        
        Args:
            text (str): Le texte extrait du document.
            
        Returns:
            dict: Les informations extraites.
        """
        # D√©terminer le type de document
        type_document = "Non sp√©cifi√©"
        if "REDDITION" in text or "reddition" in text.lower():
            type_document = "Reddition de charges"
        elif "APPEL DE CHARGES" in text or "appel de charges" in text.lower():
            type_document = "Appel de charges"
        elif "BUDGET PR√âVISIONNEL" in text or "budget pr√©visionnel" in text.lower():
            type_document = "Budget pr√©visionnel"
            
        # Extraire la p√©riode concern√©e
        periode = "Non sp√©cifi√©e"
        periode_pattern = r'[Pp]√©riode du (\d{2}/\d{2}/\d{4}) au (\d{2}/\d{2}/\d{4})'
        periode_match = re.search(periode_pattern, text)
        if periode_match:
            periode = f"{periode_match.group(1)} au {periode_match.group(2)}"
            
        # Extraire le montant total des charges
        montant_total = "Non sp√©cifi√©"
        # Plusieurs patterns possibles selon le format du document
        patterns_montant = [
            r'Total charges\s+([0-9\s]+[,.]\d{2})',
            r'Charges\s+([0-9\s]+[,.]\d{2}\s*‚Ç¨?)',
            r'REDDITION CHARGES[^\n]+\s+([0-9\s]+[,.]\d{2}\s*‚Ç¨?)'
        ]
        
        for pattern in patterns_montant:
            match = re.search(pattern, text)
            if match:
                montant_total = match.group(1).replace(' ', '').replace('‚Ç¨', '')
                break
                
        # Extraire le montant des provisions vers√©es
        provisions = "Non sp√©cifi√©"
        provisions_pattern = r'Provisions\s+(-?[0-9\s]+[,.]\d{2}\s*‚Ç¨?)'
        provisions_match = re.search(provisions_pattern, text)
        if provisions_match:
            provisions = provisions_match.group(1).replace(' ', '').replace('‚Ç¨', '')
            
        # Extraire le solde
        solde = "Non sp√©cifi√©"
        solde_pattern = r'Solde\s+(-?[0-9\s]+[,.]\d{2}\s*‚Ç¨?)'
        solde_match = re.search(solde_pattern, text)
        if solde_match:
            solde = solde_match.group(1).replace(' ', '').replace('‚Ç¨', '')
            
        # Extraire la quote-part du locataire
        quote_part = "Non sp√©cifi√©e"
        if "Tanti√®mes" in text and "Quote-part" in text:
            # Rechercher les tanti√®mes sp√©cifiques au locataire
            tantiemes_pattern = r'(\d+)\s+(\d+\.\d{2})\s+365\s+'
            tantiemes_match = re.search(tantiemes_pattern, text)
            if tantiemes_match:
                quote_part = f"{tantiemes_match.group(1)}/{tantiemes_match.group(2)} (365 jours)"
                
        # Extraire la r√©partition des charges par poste
        repartition_charges = {}
        charges_pattern = r'(\d{2} / \d{2}|\d{2}/\d{2})\s+([A-Z\s/&.]+)(?:\s+)([0-9\s]+[,.]\d{2}\s*‚Ç¨?)(?:\s+\d+\s+[\d.]+\s+\d+\s+)([0-9\s]+[,.]\d{2})'
        
        for match in re.finditer(charges_pattern, text):
            poste = match.group(2).strip()
            montant = match.group(4).replace(' ', '')
            repartition_charges[poste] = montant
            
        # Extraire le montant factur√© au locataire
        montant_facture = "Non sp√©cifi√©"
        if type_document == "Reddition de charges" and solde != "Non sp√©cifi√©":
            # Pour une reddition, le montant factur√© est le solde
            montant_facture = solde
            
        result = {
            "Type de document": type_document,
            "Ann√©e ou p√©riode concern√©e": periode,
            "Montant total des charges": montant_total,
            "R√©partition des charges par poste": repartition_charges,
            "Quote-part du locataire": quote_part,
            "Montant factur√© au locataire": montant_facture,
            "Montant des provisions d√©j√† vers√©es": provisions,
            "Solde": solde
        }
        
        return result
        
    def _is_extraction_complete(self, result):
        """
        V√©rifie si l'extraction directe a donn√© des r√©sultats satisfaisants.
        
        Args:
            result (dict): Les r√©sultats de l'extraction.
            
        Returns:
            bool: True si l'extraction est compl√®te, False sinon.
        """
        # V√©rifier que les champs essentiels contiennent des informations
        essential_fields = [
            "Type de document", 
            "Montant total des charges", 
            "Solde"
        ]
        
        for field in essential_fields:
            if field not in result or result[field] == "Non sp√©cifi√©":
                return False
                
        # V√©rifier qu'il y a au moins quelques postes de charges
        if "R√©partition des charges par poste" not in result or len(result["R√©partition des charges par poste"]) < 2:
            return False
            
        return True

def download_json(data):
    """G√©n√®re un lien de t√©l√©chargement pour les r√©sultats au format JSON."""
    json_str = json.dumps(data, indent=2, ensure_ascii=False)
    b64 = base64.b64encode(json_str.encode()).decode()
    href = f'<a href="data:application/json;base64,{b64}" download="resultats_analyse.json">T√©l√©charger les r√©sultats (JSON)</a>'
    return href

def display_results(results):
    """Affiche les r√©sultats de mani√®re structur√©e et claire."""
    if "error" in results:
        st.error(f"Erreur lors de l'analyse: {results['error']}")
        if "raw_response" in results:
            st.text_area("R√©ponse brute:", results["raw_response"], height=300)
        return
    
    st.markdown("## R√©sultats de l'analyse")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Informations g√©n√©rales")
        st.info(f"**Type de document:** {results.get('Type de document', 'Non sp√©cifi√©')}")
        st.info(f"**P√©riode concern√©e:** {results.get('Ann√©e ou p√©riode concern√©e', 'Non sp√©cifi√©e')}")
        st.info(f"**Montant total des charges:** {results.get('Montant total des charges', 'Non sp√©cifi√©')}")
    
    with col2:
        st.markdown("### Informations financi√®res")
        st.info(f"**Quote-part du locataire:** {results.get('Quote-part du locataire', 'Non sp√©cifi√©e')}")
        st.info(f"**Montant factur√© au locataire:** {results.get('Montant factur√© au locataire', 'Non sp√©cifi√©')}")
        st.info(f"**Provisions d√©j√† vers√©es:** {results.get('Montant des provisions d√©j√† vers√©es', 'Non sp√©cifi√©')}")
        st.info(f"**Solde:** {results.get('Solde', 'Non sp√©cifi√©')}")
    
    # Afficher la r√©partition des charges si disponible
    if "R√©partition des charges par poste" in results and results["R√©partition des charges par poste"]:
        st.markdown("### R√©partition des charges par poste")
        
        # Convertir en dictionnaire si ce n'est pas d√©j√† le cas
        repartition = results["R√©partition des charges par poste"]
        if isinstance(repartition, str):
            try:
                repartition = json.loads(repartition)
            except:
                pass
        
        if isinstance(repartition, dict):
            # Cr√©er un DataFrame pour l'affichage
            df = pd.DataFrame({
                'Poste': list(repartition.keys()),
                'Montant': list(repartition.values())
            })
            
            # Nettoyer les montants pour le graphique
            df['Montant_Numeric'] = df['Montant'].apply(
                lambda x: float(str(x).replace('‚Ç¨', '').replace(',', '.').replace(' ', ''))
                if isinstance(x, str) else float(x)
            )
            
            # Trier par montant d√©croissant
            df = df.sort_values('Montant_Numeric', ascending=False)
            
            # Afficher le tableau
            st.dataframe(df[['Poste', 'Montant']])
            
            # Cr√©er un graphique
            chart_df = df.copy()
            chart_df = chart_df.set_index('Poste')
            st.bar_chart(chart_df[['Montant_Numeric']])
        else:
            st.write(repartition)
    
    # Bouton de t√©l√©chargement des r√©sultats
    st.markdown(download_json(results), unsafe_allow_html=True)
    
    # Afficher les r√©sultats JSON bruts dans un expander
    with st.expander("Voir les r√©sultats bruts (JSON)"):
        st.json(results) st.columns(2)
    
    with col1:
        st.markdown("### Informations g√©n√©rales")
        st.info(f"**Type de document:** {results.get('Type de document', 'Non sp√©cifi√©')}")
        st.info(f"**P√©riode concern√©e:** {results.get('Ann√©e ou p√©riode concern√©e', 'Non sp√©cifi√©e')}")
        st.info(f"**Montant total des charges:** {results.get('Montant total des charges', 'Non sp√©cifi√©')}")
    
    with col2:
        st.markdown("### Informations financi√®res")
        st.info(f"**Quote-part du locataire:** {results.get('Quote-part du locataire', 'Non sp√©cifi√©e')}")
        st.info(f"**Montant factur√© au locataire:** {results.get('Montant factur√© au locataire', 'Non sp√©cifi√©')}")
        st.info(f"**Provisions d√©j√† vers√©es:** {results.get('Montant des provisions d√©j√† vers√©es', 'Non sp√©cifi√©')}")
        st.info(f"**Solde:** {results.get('Solde', 'Non sp√©cifi√©')}")
    
    # Afficher la r√©partition des charges si disponible
    if "R√©partition des charges par poste" in results and results["R√©partition des charges par poste"]:
        st.markdown("### R√©partition des charges par poste")
        
        # Convertir en dictionnaire si ce n'est pas d√©j√† le cas
        repartition = results["R√©partition des charges par poste"]
        if isinstance(repartition, str):
            try:
                repartition = json.loads(repartition)
            except:
                pass
        
        if isinstance(repartition, dict):
            # Cr√©er un DataFrame pour l'affichage
            df = pd.DataFrame({
                'Poste': list(repartition.keys()),
                'Montant': list(repartition.values())
            })
            
            # Nettoyer les montants pour le graphique
            df['Montant_Numeric'] = df['Montant'].apply(
                lambda x: float(str(x).replace('‚Ç¨', '').replace(',', '.').replace(' ', ''))
                if isinstance(x, str) else float(x)
            )
            
            # Trier par montant d√©croissant
            df = df.sort_values('Montant_Numeric', ascending=False)
            
            # Afficher le tableau
            st.dataframe(df[['Poste', 'Montant']])
            
            # Cr√©er un graphique
            chart_df = df.copy()
            chart_df = chart_df.set_index('Poste')
            st.bar_chart(chart_df[['Montant_Numeric']])
        else:
            st.write(repartition)
    
    # Bouton de t√©l√©chargement des r√©sultats
    st.markdown(download_json(results), unsafe_allow_html=True)
    
    # Afficher les r√©sultats JSON bruts dans un expander
    with st.expander("Voir les r√©sultats bruts (JSON)"):
        st.json(results) st.columns(2)
    
    with col1:
        st.markdown("### Informations g√©n√©rales")
        st.info(f"**Type de document:** {results.get('Type de document', 'Non sp√©cifi√©')}")
        st.info(f"**P√©riode concern√©e:** {results.get('Ann√©e ou p√©riode concern√©e', 'Non sp√©cifi√©e')}")
        st.info(f"**Montant total des charges:** {results.get('Montant total des charges', 'Non sp√©cifi√©')}")
    
    with col2:
        st.markdown("### Informations financi√®res")
        st.info(f"**Quote-part du locataire:** {results.get('Quote-part du locataire', 'Non sp√©cifi√©e')}")
        st.info(f"**Montant factur√© au locataire:** {results.get('Montant factur√© au locataire', 'Non sp√©cifi√©')}")
        st.info(f"**Provisions d√©j√† vers√©es:** {results.get('Montant des provisions d√©j√† vers√©es', 'Non sp√©cifi√©')}")
        st.info(f"**Solde:** {results.get('Solde', 'Non sp√©cifi√©')}")
    
    # Afficher la r√©partition des charges si disponible
    if "R√©partition des charges par poste" in results and results["R√©partition des charges par poste"]:
        st.markdown("### R√©partition des charges par poste")
        
        # Convertir en dictionnaire si ce n'est pas d√©j√† le cas
        repartition = results["R√©partition des charges par poste"]
        if isinstance(repartition, str):
            try:
                repartition = json.loads(repartition)
            except:
                pass
        
        if isinstance(repartition, dict):
            # Cr√©er un DataFrame pour l'affichage
            df = pd.DataFrame({
                'Poste': list(repartition.keys()),
                'Montant': list(repartition.values())
            })
            
            # Afficher le tableau
            st.dataframe(df)
            
            # Cr√©er un graphique
            st.bar_chart(df.set_index('Poste'))
        else:
            st.write(repartition)
    
    # Bouton de t√©l√©chargement des r√©sultats
    st.markdown(download_json(results), unsafe_allow_html=True)
    
    # Afficher les r√©sultats JSON bruts dans un expander
    with st.expander("Voir les r√©sultats bruts (JSON)"):
        st.json(results)

def main():
    """Fonction principale de l'application Streamlit."""
    st.set_page_config(
        page_title="Analyseur de Charges - Baux Commerciaux",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("Analyseur de Tableaux de Charges pour Baux Commerciaux")
    st.markdown("""
    Cette application analyse vos tableaux de charges et redditions de charges pour des baux commerciaux.
    T√©l√©chargez un fichier PDF, Excel ou CSV et obtenez une analyse d√©taill√©e gr√¢ce √† l'OCR et √† l'IA.
    """)
    
    # Sidebar pour la configuration
    st.sidebar.title("Configuration")
    
    # R√©cup√©ration des cl√©s API depuis les secrets de Streamlit
    try:
        api_key = st.secrets["OPENAI_API_KEY"]
        st.sidebar.success("‚úÖ Cl√© API OpenAI charg√©e depuis les secrets")
    except Exception as e:
        st.sidebar.error("‚ùå Impossible de charger la cl√© API OpenAI depuis les secrets")
        api_key = st.sidebar.text_input("Cl√© API OpenAI (secours)", type="password")
        
    # R√©cup√©ration de la cl√© OCR API si disponible
    try:
        ocr_api_key = st.secrets["OCR_API_KEY"]
        st.sidebar.success("‚úÖ Cl√© API OCR charg√©e depuis les secrets")
    except Exception as e:
        ocr_api_key = None
    
    # Param√®tres d'analyse avanc√©s
    st.sidebar.markdown("---")
    st.sidebar.subheader("Param√®tres d'analyse")
    
    use_ai = st.sidebar.checkbox("Utiliser l'IA pour l'analyse", value=True, 
                              help="D√©sactivez pour utiliser uniquement l'extraction directe (plus rapide mais moins pr√©cis)")
    
    ocr_quality = st.sidebar.select_slider(
        "Qualit√© OCR", 
        options=["Rapide", "Standard", "Pr√©cise"],
        value="Standard",
        help="Plus la qualit√© est √©lev√©e, plus l'analyse sera pr√©cise mais plus le temps de traitement sera long"
    )
    
    # Ajouter un expander pour les informations techniques
    with st.sidebar.expander("Informations techniques"):
        st.markdown("""
        - **Extraction directe** : analyse le document directement en utilisant des expressions r√©guli√®res
        - **Analyse IA** : utilise GPT-4o-mini pour une analyse plus approfondie
        - **Qualit√© OCR** : affecte la pr√©cision de la reconnaissance de texte dans les PDFs
        """)
    
    # Informations suppl√©mentaires dans la sidebar
    st.sidebar.markdown("---")
    st.sidebar.markdown("""
    ## √Ä propos
    Cette application utilise:
    - OCR (Reconnaissance Optique de Caract√®res) pour extraire le texte des PDFs
    - GPT-4o-mini pour analyser le contenu
    - Streamlit pour l'interface utilisateur
    
    ## Formats support√©s
    - PDF (avec extraction OCR)
    - Excel (.xlsx, .xls)
    - CSV
    """)
    
    # Onglets principaux
    tab1, tab2 = st.tabs(["Analyse simple", "Analyse comparative"])
    
    with tab1:
        # Zone principale pour l'analyse simple
        st.markdown("## T√©l√©chargement du fichier")
        uploaded_file = st.file_uploader("Choisissez un fichier √† analyser", type=["pdf", "xlsx", "xls", "csv"], key="single_file")
        
        if uploaded_file is not None:
            st.markdown("---")
            
            # Afficher des informations sur le fichier t√©l√©charg√©
            file_details = {
                "Nom du fichier": uploaded_file.name,
                "Type de fichier": uploaded_file.type,
                "Taille": f"{uploaded_file.size / 1024:.2f} KB"
            }
            
            st.markdown("### D√©tails du fichier")
            for key, value in file_details.items():
                st.info(f"**{key}:** {value}")
            
            # Bouton pour lancer l'analyse
            if st.button("Analyser le document"):
                if not api_key:
                    st.error("Aucune cl√© API OpenAI disponible. V√©rifiez les secrets Streamlit ou entrez une cl√© manuellement.")
                else:
                    try:
                        # Afficher un spinner pendant l'analyse
                        with st.spinner("Analyse en cours, veuillez patienter..."):
                            # Configurer les options d'OCR selon le choix de qualit√©
                            ocr_config = {
                                "Rapide": "--oem 0 --psm 6",
                                "Standard": "--oem 3 --psm 6",
                                "Pr√©cise": "--oem 3 --psm 11 -l fra"
                            }
                            
                            # Initialiser l'analyseur avec les param√®tres configur√©s
                            analyzer = ChargesAnalyzer(
                                api_key=api_key, 
                                ocr_api_key=ocr_api_key, 
                                use_ai=use_ai,
                                tesseract_config=ocr_config[ocr_quality]
                            )
                            
                            # Traiter le fichier
                            results = analyzer.process_file(uploaded_file)
                            
                            # Afficher les r√©sultats
                            display_results(results)
                    except Exception as e:
                        st.error(f"Une erreur est survenue: {str(e)}")
                        st.exception(e)  # Affiche la trace compl√®te de l'erreur pour le d√©bogage
    
    with tab2:
        # Zone pour l'analyse comparative
        st.markdown("## Comparaison de documents")
        st.markdown("""
        Cette fonctionnalit√© vous permet de comparer deux documents de charges pour analyser les diff√©rences 
        (par exemple, comparer deux ann√©es cons√©cutives ou deux locataires diff√©rents).
        """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### Premier document")
            uploaded_file1 = st.file_uploader("Choisissez le premier fichier", type=["pdf", "xlsx", "xls", "csv"], key="file1")
        
        with col2:
            st.markdown("### Second document")
            uploaded_file2 = st.file_uploader("Choisissez le second fichier", type=["pdf", "xlsx", "xls", "csv"], key="file2")
        
        if uploaded_file1 is not None and uploaded_file2 is not None:
            if st.button("Comparer les documents"):
                if not api_key:
                    st.error("Aucune cl√© API OpenAI disponible. V√©rifiez les secrets Streamlit ou entrez une cl√© manuellement.")
                else:
                    try:
                        # Analyser le premier document
                        with st.spinner("Analyse du premier document en cours..."):
                            analyzer = ChargesAnalyzer(
                                api_key=api_key, 
                                ocr_api_key=ocr_api_key,
                                use_ai=use_ai,
                                tesseract_config=ocr_config[ocr_quality]
                            )
                            results1 = analyzer.process_file(uploaded_file1)
                            
                        # Analyser le second document
                        with st.spinner("Analyse du second document en cours..."):
                            results2 = analyzer.process_file(uploaded_file2)
                        
                        # Afficher une comparaison des r√©sultats
                        st.markdown("## R√©sultats de la comparaison")
                        
                        # Comparer les informations g√©n√©rales
                        compare_cols = st.columns(2)
                        with compare_cols[0]:
                            st.markdown(f"### {uploaded_file1.name}")
                            st.info(f"**Type de document:** {results1.get('Type de document', 'Non sp√©cifi√©')}")
                            st.info(f"**P√©riode concern√©e:** {results1.get('Ann√©e ou p√©riode concern√©e', 'Non sp√©cifi√©e')}")
                            st.info(f"**Montant total des charges:** {results1.get('Montant total des charges', 'Non sp√©cifi√©')}")
                        
                        with compare_cols[1]:
                            st.markdown(f"### {uploaded_file2.name}")
                            st.info(f"**Type de document:** {results2.get('Type de document', 'Non sp√©cifi√©')}")
                            st.info(f"**P√©riode concern√©e:** {results2.get('Ann√©e ou p√©riode concern√©e', 'Non sp√©cifi√©e')}")
                            st.info(f"**Montant total des charges:** {results2.get('Montant total des charges', 'Non sp√©cifi√©')}")
                        
                        # Comparer les r√©partitions de charges
                        if ("R√©partition des charges par poste" in results1 and 
                            "R√©partition des charges par poste" in results2):
                            
                            st.markdown("### Comparaison des postes de charges")
                            
                            repartition1 = results1["R√©partition des charges par poste"]
                            repartition2 = results2["R√©partition des charges par poste"]
                            
                            # Convertir en dictionnaires si n√©cessaire
                            if isinstance(repartition1, str):
                                try: repartition1 = json.loads(repartition1)
                                except: pass
                            if isinstance(repartition2, str):
                                try: repartition2 = json.loads(repartition2)
                                except: pass
                            
                            if isinstance(repartition1, dict) and isinstance(repartition2, dict):
                                # Cr√©er un DataFrame pour la comparaison
                                all_postes = list(set(list(repartition1.keys()) + list(repartition2.keys())))
                                
                                comparison_data = {
                                    'Poste': all_postes,
                                    'Document 1': [repartition1.get(poste, "N/A") for poste in all_postes],
                                    'Document 2': [repartition2.get(poste, "N/A") for poste in all_postes],
                                }
                                
                                df_comp = pd.DataFrame(comparison_data)
                                
                                # Convertir en valeurs num√©riques pour le calcul de la variation
                                def convert_to_numeric(val):
                                    if val == "N/A": 
                                        return float('nan')
                                    return float(str(val).replace('‚Ç¨', '').replace(',', '.').replace(' ', ''))
                                
                                df_comp['Valeur 1'] = df_comp['Document 1'].apply(convert_to_numeric)
                                df_comp['Valeur 2'] = df_comp['Document 2'].apply(convert_to_numeric)
                                
                                # Calculer la variation
                                df_comp['Variation'] = ((df_comp['Valeur 2'] - df_comp['Valeur 1']) / df_comp['Valeur 1'] * 100).round(2)
                                df_comp['Variation'] = df_comp['Variation'].apply(lambda x: f"{x}%" if not pd.isna(x) else "N/A")
                                
                                # Afficher le tableau de comparaison
                                st.dataframe(df_comp[['Poste', 'Document 1', 'Document 2', 'Variation']])
                    
                    except Exception as e:
                        st.error(f"Une erreur est survenue lors de la comparaison: {str(e)}")
                        st.exception(e)

if __name__ == "__main__":
    # Afficher les informations sur les secrets disponibles (sans r√©v√©ler les valeurs)
    st.sidebar.markdown("### √âtat des secrets")
    secrets_status = {
        "OPENAI_API_KEY": "OPENAI_API_KEY" in st.secrets if hasattr(st, "secrets") else False,
        "OCR_API_KEY": "OCR_API_KEY" in st.secrets if hasattr(st, "secrets") else False
    }
    
    for secret_name, is_available in secrets_status.items():
        if is_available:
            st.sidebar.success(f"‚úÖ {secret_name} configur√©")
        else:
            st.sidebar.warning(f"‚ö†Ô∏è {secret_name} non configur√©")
    
    # Pour les erreurs li√©es √† l'OCR sur Streamlit Cloud
    try:
        import pytesseract
    except ImportError:
        st.error("La biblioth√®que pytesseract n'est pas install√©e. Ajoutez-la √† requirements.txt")
    
    try:
        # Tester si tesseract est install√©
        pytesseract.get_tesseract_version()
    except Exception as e:
        st.warning(f"Tesseract OCR n'est pas correctement configur√©: {str(e)}")
        st.info("Sur Streamlit Cloud, ajoutez 'tesseract-ocr' √† votre packages.txt")
    
    main()
